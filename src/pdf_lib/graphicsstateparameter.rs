// Copyright (c) 2019-2021 SRI International.
// All rights reserved.
//
//    This file is part of the Parsley parser.
//
//    Parsley is free software: you can redistribute it and/or modify
//    it under the terms of the GNU General Public License as published by
//    the Free Software Foundation, either version 3 of the License, or
//    (at your option) any later version.
//
//    Parsley is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//    GNU General Public License for more details.
//
//    You should have received a copy of the GNU General Public License
//    along with this program.  If not, see <https://www.gnu.org/licenses/>.
use super::pdf_obj::PDFObjT;
use crate::pdf_lib::common_data_structures::{
    mk_array_of_dict_typchk, mk_generic_array_typchk, mk_generic_dict_typchk,
    mk_generic_indirect_array_typchk, mk_generic_indirect_dict_typchk,
    mk_generic_indirect_stream_typchk, mk_name_check, name_dictionary,
};
use crate::pdf_lib::number_tree::number_tree;
use crate::pdf_lib::pdf_prim::NameT;
use crate::pdf_lib::arrayofgspdashpatterns::arrayofgspdashpatterns_type;
use crate::pdf_lib::fonttype1::fonttype1_type;
use crate::pdf_lib::fonttruetype::fonttruetype_type;
use crate::pdf_lib::fontmultiplemaster::fontmultiplemaster_type;
use crate::pdf_lib::fonttype3::fonttype3_type;
use crate::pdf_lib::fonttype0::fonttype0_type;
use crate::pdf_lib::fontcidtype0::fontcidtype0_type;
use crate::pdf_lib::fontcidtype2::fontcidtype2_type;
use crate::pdf_lib::functiontype2::functiontype2_type;
use crate::pdf_lib::functiontype3::functiontype3_type;
use crate::pdf_lib::functiontype0::functiontype0_type;
use crate::pdf_lib::functiontype4::functiontype4_type;
use crate::pdf_lib::functiontype2::functiontype2_type;
use crate::pdf_lib::functiontype3::functiontype3_type;
use crate::pdf_lib::functiontype0::functiontype0_type;
use crate::pdf_lib::functiontype4::functiontype4_type;
use crate::pdf_lib::functiontype2::functiontype2_type;
use crate::pdf_lib::functiontype3::functiontype3_type;
use crate::pdf_lib::functiontype0::functiontype0_type;
use crate::pdf_lib::functiontype4::functiontype4_type;
use crate::pdf_lib::functiontype2::functiontype2_type;
use crate::pdf_lib::functiontype3::functiontype3_type;
use crate::pdf_lib::functiontype0::functiontype0_type;
use crate::pdf_lib::functiontype4::functiontype4_type;
use crate::pdf_lib::arrayoffunctions::arrayoffunctions_type;
use crate::pdf_lib::functiontype2::functiontype2_type;
use crate::pdf_lib::functiontype3::functiontype3_type;
use crate::pdf_lib::functiontype0::functiontype0_type;
use crate::pdf_lib::functiontype4::functiontype4_type;
use crate::pdf_lib::arrayoffunctions::arrayoffunctions_type;
use crate::pdf_lib::functiontype2::functiontype2_type;
use crate::pdf_lib::functiontype3::functiontype3_type;
use crate::pdf_lib::functiontype0::functiontype0_type;
use crate::pdf_lib::functiontype4::functiontype4_type;
use crate::pdf_lib::halftonetype1::halftonetype1_type;
use crate::pdf_lib::halftonetype5::halftonetype5_type;
use crate::pdf_lib::halftonetype6::halftonetype6_type;
use crate::pdf_lib::halftonetype10::halftonetype10_type;
use crate::pdf_lib::halftonetype16::halftonetype16_type;
use crate::pdf_lib::arrayofnamesgeneral::arrayofnamesgeneral_type;
use crate::pdf_lib::softmaskalpha::softmaskalpha_type;
use crate::pdf_lib::softmaskluminosity::softmaskluminosity_type;
use crate::pdf_lib::arrayof_2numbers::arrayof_2numbers_type;
use crate::pdf_lib::arrayof_2integers::arrayof_2integers_type;
    let choices_type = ChoicesPred(
        String::From("Invalid Type"), 
        vec![ 
         PDFObjT::Name(NameT::new(Vec::from("ExtGState"))),
           ],
     );
    let choices_ri = ChoicesPred(
        String::From("Invalid RI"), 
        vec![ 
         PDFObjT::Name(NameT::new(Vec::from("AbsoluteColorimetric"))),
         PDFObjT::Name(NameT::new(Vec::from("RelativeColorimetric"))),
         PDFObjT::Name(NameT::new(Vec::from("Saturation"))),
         PDFObjT::Name(NameT::new(Vec::from("Perceptual"))),
           ],
     );
    let choices_useblackptcomp = ChoicesPred(
        String::From("Invalid UseBlackPtComp"), 
        vec![ 
         PDFObjT::Name(NameT::new(Vec::from("OFF"))),
         PDFObjT::Name(NameT::new(Vec::from("ON"))),
         PDFObjT::Name(NameT::new(Vec::from("Default"))),
           ],
     );
pub fn graphicsstateparameter_type(tctx: &mut TypeCheckContext) -> Rc<TypeCheck> {
    let type_field = DictEntry { 
       key: Vec::from("Type"), 
       chk: choices_type(tctx),
       opt: DictKeySpec::Optional,
    }; 
    let lw_field = DictEntry { 
       key: Vec::from("LW"), 
       chk: choices_lw(tctx),
       opt: DictKeySpec::Optional,
    }; 
    let lc_field = DictEntry { 
       key: Vec::from("LC"), 
       chk: choices_lc(tctx),
       opt: DictKeySpec::Optional,
    }; 
    let lj_field = DictEntry { 
       key: Vec::from("LJ"), 
       chk: choices_lj(tctx),
       opt: DictKeySpec::Optional,
    }; 
    let ml_field = DictEntry { 
       key: Vec::from("ML"), 
       chk: choices_ml(tctx),
       opt: DictKeySpec::Optional,
    }; 
    let d_field = DictEntry { 
       key: Vec::from("D"), 
       chk: Rc::new(PDFType::Disjunct(vec![
         [_type,
         a_type,
         r_type,
         r_type,
         a_type,
         y_type,
         o_type,
         f_type,
         g_type,
         s_type,
         p_type,
         d_type,
         a_type,
         s_type,
         h_type,
         p_type,
         a_type,
         t_type,
         t_type,
         e_type,
         r_type,
         n_type,
         s_type,
         ]_type,
]),
       opt: DictKeySpec::Optional,
    }; 
    let ri_field = DictEntry { 
       key: Vec::from("RI"), 
       chk: choices_ri(tctx),
       opt: DictKeySpec::Optional,
    }; 
    let op_field = DictEntry { 
       key: Vec::from("OP"), 
       opt: DictKeySpec::Optional,
    }; 
    let op_field = DictEntry { 
       key: Vec::from("op"), 
       opt: DictKeySpec::Optional,
    }; 
    let opm_field = DictEntry { 
       key: Vec::from("OPM"), 
       chk: choices_opm(tctx),
       opt: DictKeySpec::Optional,
    }; 
    let font_field = DictEntry { 
       key: Vec::from("Font"), 
       chk: Rc::new(PDFType::Disjunct(vec![
         [_type,
         f_type,
         o_type,
         n_type,
         t_type,
         t_type,
         y_type,
         p_type,
         e_type,
         1_type,
         ,_type,
         f_type,
         o_type,
         n_type,
         t_type,
         t_type,
         r_type,
         u_type,
         e_type,
         t_type,
         y_type,
         p_type,
         e_type,
         ,_type,
         f_type,
         o_type,
         n_type,
         t_type,
         m_type,
         u_type,
         l_type,
         t_type,
         i_type,
         p_type,
         l_type,
         e_type,
         m_type,
         a_type,
         s_type,
         t_type,
         e_type,
         r_type,
         ,_type,
         f_type,
         o_type,
         n_type,
         t_type,
         t_type,
         y_type,
         p_type,
         e_type,
         3_type,
         ,_type,
         f_type,
         o_type,
         n_type,
         t_type,
         t_type,
         y_type,
         p_type,
         e_type,
         0_type,
         ,_type,
         f_type,
         o_type,
         n_type,
         t_type,
         c_type,
         i_type,
         d_type,
         t_type,
         y_type,
         p_type,
         e_type,
         0_type,
         ,_type,
         f_type,
         o_type,
         n_type,
         t_type,
         c_type,
         i_type,
         d_type,
         t_type,
         y_type,
         p_type,
         e_type,
         2_type,
         ]_type,
]),
       opt: DictKeySpec::Optional,
    }; 
    let bg_field = DictEntry { 
       key: Vec::from("BG"), 
       chk: Rc::new(PDFType::Disjunct(vec![
         [_type,
         f_type,
         u_type,
         n_type,
         c_type,
         t_type,
         i_type,
         o_type,
         n_type,
         t_type,
         y_type,
         p_type,
         e_type,
         2_type,
         ,_type,
         f_type,
         u_type,
         n_type,
         c_type,
         t_type,
         i_type,
         o_type,
         n_type,
         t_type,
         y_type,
         p_type,
         e_type,
         3_type,
         ]_type,
         ;_type,
         [_type,
         f_type,
         u_type,
         n_type,
         c_type,
         t_type,
         i_type,
         o_type,
         n_type,
         t_type,
         y_type,
         p_type,
         e_type,
         0_type,
         ,_type,
         f_type,
         u_type,
         n_type,
         c_type,
         t_type,
         i_type,
         o_type,
         n_type,
         t_type,
         y_type,
         p_type,
         e_type,
         4_type,
         ]_type,
]),
       opt: DictKeySpec::Optional,
    }; 
    let bg2_field = DictEntry { 
       key: Vec::from("BG2"), 
       chk: Rc::new(PDFType::Disjunct(vec![
         [_type,
         f_type,
         u_type,
         n_type,
         c_type,
         t_type,
         i_type,
         o_type,
         n_type,
         t_type,
         y_type,
         p_type,
         e_type,
         2_type,
         ,_type,
         f_type,
         u_type,
         n_type,
         c_type,
         t_type,
         i_type,
         o_type,
         n_type,
         t_type,
         y_type,
         p_type,
         e_type,
         3_type,
         ]_type,
         ;_type,
         [_type,
         ]_type,
         ;_type,
         [_type,
         f_type,
         u_type,
         n_type,
         c_type,
         t_type,
         i_type,
         o_type,
         n_type,
         t_type,
         y_type,
         p_type,
         e_type,
         0_type,
         ,_type,
         f_type,
         u_type,
         n_type,
         c_type,
         t_type,
         i_type,
         o_type,
         n_type,
         t_type,
         y_type,
         p_type,
         e_type,
         4_type,
         ]_type,
]),
       opt: DictKeySpec::Optional,
    }; 
    let ucr_field = DictEntry { 
       key: Vec::from("UCR"), 
       chk: Rc::new(PDFType::Disjunct(vec![
         [_type,
         f_type,
         u_type,
         n_type,
         c_type,
         t_type,
         i_type,
         o_type,
         n_type,
         t_type,
         y_type,
         p_type,
         e_type,
         2_type,
         ,_type,
         f_type,
         u_type,
         n_type,
         c_type,
         t_type,
         i_type,
         o_type,
         n_type,
         t_type,
         y_type,
         p_type,
         e_type,
         3_type,
         ]_type,
         ;_type,
         [_type,
         f_type,
         u_type,
         n_type,
         c_type,
         t_type,
         i_type,
         o_type,
         n_type,
         t_type,
         y_type,
         p_type,
         e_type,
         0_type,
         ,_type,
         f_type,
         u_type,
         n_type,
         c_type,
         t_type,
         i_type,
         o_type,
         n_type,
         t_type,
         y_type,
         p_type,
         e_type,
         4_type,
         ]_type,
]),
       opt: DictKeySpec::Optional,
    }; 
    let ucr2_field = DictEntry { 
       key: Vec::from("UCR2"), 
       chk: Rc::new(PDFType::Disjunct(vec![
         [_type,
         f_type,
         u_type,
         n_type,
         c_type,
         t_type,
         i_type,
         o_type,
         n_type,
         t_type,
         y_type,
         p_type,
         e_type,
         2_type,
         ,_type,
         f_type,
         u_type,
         n_type,
         c_type,
         t_type,
         i_type,
         o_type,
         n_type,
         t_type,
         y_type,
         p_type,
         e_type,
         3_type,
         ]_type,
         ;_type,
         [_type,
         ]_type,
         ;_type,
         [_type,
         f_type,
         u_type,
         n_type,
         c_type,
         t_type,
         i_type,
         o_type,
         n_type,
         t_type,
         y_type,
         p_type,
         e_type,
         0_type,
         ,_type,
         f_type,
         u_type,
         n_type,
         c_type,
         t_type,
         i_type,
         o_type,
         n_type,
         t_type,
         y_type,
         p_type,
         e_type,
         4_type,
         ]_type,
]),
       opt: DictKeySpec::Optional,
    }; 
    let tr_field = DictEntry { 
       key: Vec::from("TR"), 
       chk: Rc::new(PDFType::Disjunct(vec![
         [_type,
         a_type,
         r_type,
         r_type,
         a_type,
         y_type,
         o_type,
         f_type,
         f_type,
         u_type,
         n_type,
         c_type,
         t_type,
         i_type,
         o_type,
         n_type,
         s_type,
         ]_type,
         ;_type,
         [_type,
         f_type,
         u_type,
         n_type,
         c_type,
         t_type,
         i_type,
         o_type,
         n_type,
         t_type,
         y_type,
         p_type,
         e_type,
         2_type,
         ,_type,
         f_type,
         u_type,
         n_type,
         c_type,
         t_type,
         i_type,
         o_type,
         n_type,
         t_type,
         y_type,
         p_type,
         e_type,
         3_type,
         ]_type,
         ;_type,
         [_type,
         ]_type,
         ;_type,
         [_type,
         f_type,
         u_type,
         n_type,
         c_type,
         t_type,
         i_type,
         o_type,
         n_type,
         t_type,
         y_type,
         p_type,
         e_type,
         0_type,
         ,_type,
         f_type,
         u_type,
         n_type,
         c_type,
         t_type,
         i_type,
         o_type,
         n_type,
         t_type,
         y_type,
         p_type,
         e_type,
         4_type,
         ]_type,
]),
       opt: DictKeySpec::Optional,
    }; 
    let tr2_field = DictEntry { 
       key: Vec::from("TR2"), 
       chk: Rc::new(PDFType::Disjunct(vec![
         [_type,
         a_type,
         r_type,
         r_type,
         a_type,
         y_type,
         o_type,
         f_type,
         f_type,
         u_type,
         n_type,
         c_type,
         t_type,
         i_type,
         o_type,
         n_type,
         s_type,
         ]_type,
         ;_type,
         [_type,
         f_type,
         u_type,
         n_type,
         c_type,
         t_type,
         i_type,
         o_type,
         n_type,
         t_type,
         y_type,
         p_type,
         e_type,
         2_type,
         ,_type,
         f_type,
         u_type,
         n_type,
         c_type,
         t_type,
         i_type,
         o_type,
         n_type,
         t_type,
         y_type,
         p_type,
         e_type,
         3_type,
         ]_type,
         ;_type,
         [_type,
         ]_type,
         ;_type,
         [_type,
         f_type,
         u_type,
         n_type,
         c_type,
         t_type,
         i_type,
         o_type,
         n_type,
         t_type,
         y_type,
         p_type,
         e_type,
         0_type,
         ,_type,
         f_type,
         u_type,
         n_type,
         c_type,
         t_type,
         i_type,
         o_type,
         n_type,
         t_type,
         y_type,
         p_type,
         e_type,
         4_type,
         ]_type,
]),
       opt: DictKeySpec::Optional,
    }; 
    let ht_field = DictEntry { 
       key: Vec::from("HT"), 
       chk: Rc::new(PDFType::Disjunct(vec![
         [_type,
         h_type,
         a_type,
         l_type,
         f_type,
         t_type,
         o_type,
         n_type,
         e_type,
         t_type,
         y_type,
         p_type,
         e_type,
         1_type,
         ,_type,
         h_type,
         a_type,
         l_type,
         f_type,
         t_type,
         o_type,
         n_type,
         e_type,
         t_type,
         y_type,
         p_type,
         e_type,
         5_type,
         ]_type,
         ;_type,
         [_type,
         ]_type,
         ;_type,
         [_type,
         h_type,
         a_type,
         l_type,
         f_type,
         t_type,
         o_type,
         n_type,
         e_type,
         t_type,
         y_type,
         p_type,
         e_type,
         6_type,
         ,_type,
         h_type,
         a_type,
         l_type,
         f_type,
         t_type,
         o_type,
         n_type,
         e_type,
         t_type,
         y_type,
         p_type,
         e_type,
         1_type,
         0_type,
         ,_type,
         h_type,
         a_type,
         l_type,
         f_type,
         t_type,
         o_type,
         n_type,
         e_type,
         t_type,
         y_type,
         p_type,
         e_type,
         1_type,
         6_type,
         ]_type,
]),
       opt: DictKeySpec::Optional,
    }; 
    let fl_field = DictEntry { 
       key: Vec::from("FL"), 
       chk: choices_fl(tctx),
       opt: DictKeySpec::Optional,
    }; 
    let sm_field = DictEntry { 
       key: Vec::from("SM"), 
       chk: choices_sm(tctx),
       opt: DictKeySpec::Optional,
    }; 
    let sa_field = DictEntry { 
       key: Vec::from("SA"), 
       opt: DictKeySpec::Optional,
    }; 
    let bm_field = DictEntry { 
       key: Vec::from("BM"), 
       chk: Rc::new(PDFType::Disjunct(vec![
         [_type,
         a_type,
         r_type,
         r_type,
         a_type,
         y_type,
         o_type,
         f_type,
         n_type,
         a_type,
         m_type,
         e_type,
         s_type,
         g_type,
         e_type,
         n_type,
         e_type,
         r_type,
         a_type,
         l_type,
         ]_type,
         ;_type,
         [_type,
         ]_type,
]),
       opt: DictKeySpec::Optional,
    }; 
    let smask_field = DictEntry { 
       key: Vec::from("SMask"), 
       chk: Rc::new(PDFType::Disjunct(vec![
         [_type,
         s_type,
         o_type,
         f_type,
         t_type,
         m_type,
         a_type,
         s_type,
         k_type,
         a_type,
         l_type,
         p_type,
         h_type,
         a_type,
         ,_type,
         s_type,
         o_type,
         f_type,
         t_type,
         m_type,
         a_type,
         s_type,
         k_type,
         l_type,
         u_type,
         m_type,
         i_type,
         n_type,
         o_type,
         s_type,
         i_type,
         t_type,
         y_type,
         ]_type,
         ;_type,
         [_type,
         ]_type,
]),
       opt: DictKeySpec::Optional,
    }; 
    let ca_field = DictEntry { 
       key: Vec::from("CA"), 
       chk: choices_ca(tctx),
       opt: DictKeySpec::Optional,
    }; 
    let ca_field = DictEntry { 
       key: Vec::from("ca"), 
       chk: choices_ca(tctx),
       opt: DictKeySpec::Optional,
    }; 
    let ais_field = DictEntry { 
       key: Vec::from("AIS"), 
       opt: DictKeySpec::Optional,
    }; 
    let tk_field = DictEntry { 
       key: Vec::from("TK"), 
       opt: DictKeySpec::Optional,
    }; 
    let useblackptcomp_field = DictEntry { 
       key: Vec::from("UseBlackPtComp"), 
       chk: choices_useblackptcomp(tctx),
       opt: DictKeySpec::Optional,
    }; 
    let hto_field = DictEntry { 
       key: Vec::from("HTO"), 
       chk: Rc::new(PDFType::Disjunct(vec![
         [_type,
         a_type,
         r_type,
         r_type,
         a_type,
         y_type,
         o_type,
         f_type,
         __type,
         2_type,
         n_type,
         u_type,
         m_type,
         b_type,
         e_type,
         r_type,
         s_type,
         ]_type,
]),
       opt: DictKeySpec::Optional,
    }; 
    let htp_field = DictEntry { 
       key: Vec::from("HTP"), 
       chk: Rc::new(PDFType::Disjunct(vec![
         [_type,
         a_type,
         r_type,
         r_type,
         a_type,
         y_type,
         o_type,
         f_type,
         __type,
         2_type,
         i_type,
         n_type,
         t_type,
         e_type,
         g_type,
         e_type,
         r_type,
         s_type,
         ]_type,
]),
       opt: DictKeySpec::Optional,
    }; 
    TypeCheck::new(
    tctx,
    "graphicsstateparameter",
    Rc::new(PDFType::Dict(vec![
      type_field,
      lw_field,
      lc_field,
      lj_field,
      ml_field,
      d_field,
      ri_field,
      op_field,
      op_field,
      opm_field,
      font_field,
      bg_field,
      bg2_field,
      ucr_field,
      ucr2_field,
      tr_field,
      tr2_field,
      ht_field,
      fl_field,
      sm_field,
      sa_field,
      bm_field,
      smask_field,
      ca_field,
      ca_field,
      ais_field,
      tk_field,
      useblackptcomp_field,
      hto_field,
      htp_field,
   ]))
}