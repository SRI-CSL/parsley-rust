// Copyright (c) 2019-2021 SRI International.
// All rights reserved.
//
//    This file is part of the Parsley parser.
//
//    Parsley is free software: you can redistribute it and/or modify
//    it under the terms of the GNU General Public License as published by
//    the Free Software Foundation, either version 3 of the License, or
//    (at your option) any later version.
//
//    Parsley is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//    GNU General Public License for more details.
//
//    You should have received a copy of the GNU General Public License
//    along with this program.  If not, see <https://www.gnu.org/licenses/>.
use super::pdf_obj::PDFObjT;
use crate::pdf_lib::common_data_structures::{
    mk_array_of_dict_typchk, mk_generic_array_typchk, mk_generic_dict_typchk,
    mk_generic_indirect_array_typchk, mk_generic_indirect_dict_typchk,
    mk_generic_indirect_stream_typchk, mk_name_check, name_dictionary,
};
use crate::pdf_lib::number_tree::number_tree;
use crate::pdf_lib::pdf_prim::NameT;
use crate::pdf_lib::arrayofnumbersgeneral::arrayofnumbersgeneral_type;
use crate::pdf_lib::arrayoffunctions::arrayoffunctions_type;
use crate::pdf_lib::functiontype2::functiontype2_type;
use crate::pdf_lib::functiontype3::functiontype3_type;
use crate::pdf_lib::functiontype0::functiontype0_type;
use crate::pdf_lib::functiontype4::functiontype4_type;
use crate::pdf_lib::calgraycolorspace::calgraycolorspace_type;
use crate::pdf_lib::calrgbcolorspace::calrgbcolorspace_type;
use crate::pdf_lib::labcolorspace::labcolorspace_type;
use crate::pdf_lib::iccbasedcolorspace::iccbasedcolorspace_type;
use crate::pdf_lib::indexedcolorspace::indexedcolorspace_type;
use crate::pdf_lib::separationcolorspace::separationcolorspace_type;
use crate::pdf_lib::devicencolorspace::devicencolorspace_type;
use crate::pdf_lib::arrayofnumbersgeneral::arrayofnumbersgeneral_type;
use crate::pdf_lib::arrayofcompressionfilternames::arrayofcompressionfilternames_type;
use crate::pdf_lib::arrayofdecodeparams::arrayofdecodeparams_type;
use crate::pdf_lib::filterlzwdecode::filterlzwdecode_type;
use crate::pdf_lib::filterflatedecode::filterflatedecode_type;
use crate::pdf_lib::filtercrypt::filtercrypt_type;
use crate::pdf_lib::filespecification::filespecification_type;
use crate::pdf_lib::arrayofcompressionfilternames::arrayofcompressionfilternames_type;
use crate::pdf_lib::arrayofdecodeparams::arrayofdecodeparams_type;
use crate::pdf_lib::filterlzwdecode::filterlzwdecode_type;
use crate::pdf_lib::filterflatedecode::filterflatedecode_type;
use crate::pdf_lib::filtercrypt::filtercrypt_type;
    let choices_bitspercoordinate = ChoicesPred(
        String::From("Invalid BitsPerCoordinate"), 
        vec![ 
         PDFObjT::Name(NameT::new(Vec::from("1"))),
         PDFObjT::Name(NameT::new(Vec::from("2"))),
         PDFObjT::Name(NameT::new(Vec::from("4"))),
         PDFObjT::Name(NameT::new(Vec::from("8"))),
         PDFObjT::Name(NameT::new(Vec::from("12"))),
         PDFObjT::Name(NameT::new(Vec::from("16"))),
         PDFObjT::Name(NameT::new(Vec::from("24"))),
         PDFObjT::Name(NameT::new(Vec::from("32"))),
           ],
     );
    let choices_bitspercomponent = ChoicesPred(
        String::From("Invalid BitsPerComponent"), 
        vec![ 
         PDFObjT::Name(NameT::new(Vec::from("1"))),
         PDFObjT::Name(NameT::new(Vec::from("2"))),
         PDFObjT::Name(NameT::new(Vec::from("4"))),
         PDFObjT::Name(NameT::new(Vec::from("8"))),
         PDFObjT::Name(NameT::new(Vec::from("12"))),
         PDFObjT::Name(NameT::new(Vec::from("16"))),
           ],
     );
    let choices_shadingtype = ChoicesPred(
        String::From("Invalid ShadingType"), 
        vec![ 
         PDFObjT::Name(NameT::new(Vec::from("6"))),
           ],
     );
pub fn shadingtype6_type(tctx: &mut TypeCheckContext) -> Rc<TypeCheck> {
    let bitspercoordinate_field = DictEntry { 
       key: Vec::from("BitsPerCoordinate"), 
       chk: choices_bitspercoordinate(tctx),
       opt: DictKeySpec::Required,
    }; 
    let bitspercomponent_field = DictEntry { 
       key: Vec::from("BitsPerComponent"), 
       chk: choices_bitspercomponent(tctx),
       opt: DictKeySpec::Required,
    }; 
    let bitsperflag_field = DictEntry { 
       key: Vec::from("BitsPerFlag"), 
       opt: DictKeySpec::Required,
    }; 
    let decode_field = DictEntry { 
       key: Vec::from("Decode"), 
       chk: Rc::new(PDFType::Disjunct(vec![
         [_type,
         a_type,
         r_type,
         r_type,
         a_type,
         y_type,
         o_type,
         f_type,
         n_type,
         u_type,
         m_type,
         b_type,
         e_type,
         r_type,
         s_type,
         g_type,
         e_type,
         n_type,
         e_type,
         r_type,
         a_type,
         l_type,
         ]_type,
]),
       opt: DictKeySpec::Optional,
    }; 
    let function_field = DictEntry { 
       key: Vec::from("Function"), 
       chk: Rc::new(PDFType::Disjunct(vec![
         [_type,
         a_type,
         r_type,
         r_type,
         a_type,
         y_type,
         o_type,
         f_type,
         f_type,
         u_type,
         n_type,
         c_type,
         t_type,
         i_type,
         o_type,
         n_type,
         s_type,
         ]_type,
         ;_type,
         [_type,
         f_type,
         u_type,
         n_type,
         c_type,
         t_type,
         i_type,
         o_type,
         n_type,
         t_type,
         y_type,
         p_type,
         e_type,
         2_type,
         ,_type,
         f_type,
         u_type,
         n_type,
         c_type,
         t_type,
         i_type,
         o_type,
         n_type,
         t_type,
         y_type,
         p_type,
         e_type,
         3_type,
         ]_type,
         ;_type,
         [_type,
         f_type,
         u_type,
         n_type,
         c_type,
         t_type,
         i_type,
         o_type,
         n_type,
         t_type,
         y_type,
         p_type,
         e_type,
         0_type,
         ,_type,
         f_type,
         u_type,
         n_type,
         c_type,
         t_type,
         i_type,
         o_type,
         n_type,
         t_type,
         y_type,
         p_type,
         e_type,
         4_type,
         ]_type,
]),
       opt: DictKeySpec::Required,
    }; 
    let shadingtype_field = DictEntry { 
       key: Vec::from("ShadingType"), 
       chk: choices_shadingtype(tctx),
       opt: DictKeySpec::Required,
    }; 
    let colorspace_field = DictEntry { 
       key: Vec::from("ColorSpace"), 
       chk: Rc::new(PDFType::Disjunct(vec![
         [_type,
         c_type,
         a_type,
         l_type,
         g_type,
         r_type,
         a_type,
         y_type,
         c_type,
         o_type,
         l_type,
         o_type,
         r_type,
         s_type,
         p_type,
         a_type,
         c_type,
         e_type,
         ,_type,
         c_type,
         a_type,
         l_type,
         r_type,
         g_type,
         b_type,
         c_type,
         o_type,
         l_type,
         o_type,
         r_type,
         s_type,
         p_type,
         a_type,
         c_type,
         e_type,
         ,_type,
         l_type,
         a_type,
         b_type,
         c_type,
         o_type,
         l_type,
         o_type,
         r_type,
         s_type,
         p_type,
         a_type,
         c_type,
         e_type,
         ,_type,
         i_type,
         c_type,
         c_type,
         b_type,
         a_type,
         s_type,
         e_type,
         d_type,
         c_type,
         o_type,
         l_type,
         o_type,
         r_type,
         s_type,
         p_type,
         a_type,
         c_type,
         e_type,
         ,_type,
         i_type,
         n_type,
         d_type,
         e_type,
         x_type,
         e_type,
         d_type,
         c_type,
         o_type,
         l_type,
         o_type,
         r_type,
         s_type,
         p_type,
         a_type,
         c_type,
         e_type,
         ,_type,
         s_type,
         e_type,
         p_type,
         a_type,
         r_type,
         a_type,
         t_type,
         i_type,
         o_type,
         n_type,
         c_type,
         o_type,
         l_type,
         o_type,
         r_type,
         s_type,
         p_type,
         a_type,
         c_type,
         e_type,
         ,_type,
         d_type,
         e_type,
         v_type,
         i_type,
         c_type,
         e_type,
         n_type,
         c_type,
         o_type,
         l_type,
         o_type,
         r_type,
         s_type,
         p_type,
         a_type,
         c_type,
         e_type,
         ]_type,
         ;_type,
         [_type,
         ]_type,
]),
       opt: DictKeySpec::Required,
    }; 
    let background_field = DictEntry { 
       key: Vec::from("Background"), 
       chk: Rc::new(PDFType::Disjunct(vec![
         [_type,
         a_type,
         r_type,
         r_type,
         a_type,
         y_type,
         o_type,
         f_type,
         n_type,
         u_type,
         m_type,
         b_type,
         e_type,
         r_type,
         s_type,
         g_type,
         e_type,
         n_type,
         e_type,
         r_type,
         a_type,
         l_type,
         ]_type,
]),
       opt: DictKeySpec::Optional,
    }; 
    let bbox_field = DictEntry { 
       key: Vec::from("BBox"), 
       opt: DictKeySpec::Optional,
    }; 
    let antialias_field = DictEntry { 
       key: Vec::from("AntiAlias"), 
       opt: DictKeySpec::Optional,
    }; 
    let length_field = DictEntry { 
       key: Vec::from("Length"), 
       opt: DictKeySpec::Required,
    }; 
    let filter_field = DictEntry { 
       key: Vec::from("Filter"), 
       chk: Rc::new(PDFType::Disjunct(vec![
         [_type,
         a_type,
         r_type,
         r_type,
         a_type,
         y_type,
         o_type,
         f_type,
         c_type,
         o_type,
         m_type,
         p_type,
         r_type,
         e_type,
         s_type,
         s_type,
         i_type,
         o_type,
         n_type,
         f_type,
         i_type,
         l_type,
         t_type,
         e_type,
         r_type,
         n_type,
         a_type,
         m_type,
         e_type,
         s_type,
         ]_type,
         ;_type,
         [_type,
         ]_type,
]),
       opt: DictKeySpec::Optional,
    }; 
    let decodeparms_field = DictEntry { 
       key: Vec::from("DecodeParms"), 
       chk: Rc::new(PDFType::Disjunct(vec![
         [_type,
         a_type,
         r_type,
         r_type,
         a_type,
         y_type,
         o_type,
         f_type,
         d_type,
         e_type,
         c_type,
         o_type,
         d_type,
         e_type,
         p_type,
         a_type,
         r_type,
         a_type,
         m_type,
         s_type,
         ]_type,
         ;_type,
         [_type,
         f_type,
         i_type,
         l_type,
         t_type,
         e_type,
         r_type,
         l_type,
         z_type,
         w_type,
         d_type,
         e_type,
         c_type,
         o_type,
         d_type,
         e_type,
         ,_type,
         f_type,
         i_type,
         l_type,
         t_type,
         e_type,
         r_type,
         f_type,
         l_type,
         a_type,
         t_type,
         e_type,
         d_type,
         e_type,
         c_type,
         o_type,
         d_type,
         e_type,
         ,_type,
         f_type,
         i_type,
         l_type,
         t_type,
         e_type,
         r_type,
         c_type,
         r_type,
         y_type,
         p_type,
         t_type,
         ]_type,
]),
       opt: DictKeySpec::Optional,
    }; 
    let f_field = DictEntry { 
       key: Vec::from("F"), 
       chk: Rc::new(PDFType::Disjunct(vec![
         [_type,
         f_type,
         i_type,
         l_type,
         e_type,
         s_type,
         p_type,
         e_type,
         c_type,
         i_type,
         f_type,
         i_type,
         c_type,
         a_type,
         t_type,
         i_type,
         o_type,
         n_type,
         ]_type,
         ;_type,
         [_type,
         ]_type,
]),
       opt: DictKeySpec::Optional,
    }; 
    let ffilter_field = DictEntry { 
       key: Vec::from("FFilter"), 
       chk: Rc::new(PDFType::Disjunct(vec![
         [_type,
         a_type,
         r_type,
         r_type,
         a_type,
         y_type,
         o_type,
         f_type,
         c_type,
         o_type,
         m_type,
         p_type,
         r_type,
         e_type,
         s_type,
         s_type,
         i_type,
         o_type,
         n_type,
         f_type,
         i_type,
         l_type,
         t_type,
         e_type,
         r_type,
         n_type,
         a_type,
         m_type,
         e_type,
         s_type,
         ]_type,
         ;_type,
         [_type,
         ]_type,
]),
       opt: DictKeySpec::Optional,
    }; 
    let fdecodeparms_field = DictEntry { 
       key: Vec::from("FDecodeParms"), 
       chk: Rc::new(PDFType::Disjunct(vec![
         [_type,
         a_type,
         r_type,
         r_type,
         a_type,
         y_type,
         o_type,
         f_type,
         d_type,
         e_type,
         c_type,
         o_type,
         d_type,
         e_type,
         p_type,
         a_type,
         r_type,
         a_type,
         m_type,
         s_type,
         ]_type,
         ;_type,
         [_type,
         f_type,
         i_type,
         l_type,
         t_type,
         e_type,
         r_type,
         l_type,
         z_type,
         w_type,
         d_type,
         e_type,
         c_type,
         o_type,
         d_type,
         e_type,
         ,_type,
         f_type,
         i_type,
         l_type,
         t_type,
         e_type,
         r_type,
         f_type,
         l_type,
         a_type,
         t_type,
         e_type,
         d_type,
         e_type,
         c_type,
         o_type,
         d_type,
         e_type,
         ,_type,
         f_type,
         i_type,
         l_type,
         t_type,
         e_type,
         r_type,
         c_type,
         r_type,
         y_type,
         p_type,
         t_type,
         ]_type,
]),
       opt: DictKeySpec::Optional,
    }; 
    let dl_field = DictEntry { 
       key: Vec::from("DL"), 
       opt: DictKeySpec::Optional,
    }; 
    TypeCheck::new(
    tctx,
    "shadingtype6",
    Rc::new(PDFType::Dict(vec![
      bitspercoordinate_field,
      bitspercomponent_field,
      bitsperflag_field,
      decode_field,
      function_field,
      shadingtype_field,
      colorspace_field,
      background_field,
      bbox_field,
      antialias_field,
      length_field,
      filter_field,
      decodeparms_field,
      f_field,
      ffilter_field,
      fdecodeparms_field,
      dl_field,
   ]))
}